from django.core.management.base import BaseCommand

from users.models import Estado, Raca, Deficiencia, TipoEnsino, TipoDeVaga
from users.models.school_transcript_model import Disciplina

class Command(BaseCommand):
    help = 'Popula dados iniciais fixos no banco (Tipos de Ensino, Ra√ßas e Defici√™ncias)'

    def handle(self, *args, **options):

        #Disciplinas
        disciplinas = [
            "Matem√°tica", "Portugu√™s", "Ci√™ncias", "Hist√≥ria", "Geografia",
            "F√≠sica", "Qu√≠mica", "Biologia", "Educa√ß√£o F√≠sica", "Artes",
            "Ingl√™s", "Espanhol"
        ]

        for nome in disciplinas:
            obj, created = Disciplina.objects.get_or_create(nome=nome)
            if created:
                self.stdout.write(self.style.SUCCESS(f"‚úî Tipo de Disciplina '{nome}' criado"))
            else:
                self.stdout.write(self.style.WARNING(f"‚Ñπ Tipo de Disciplina '{nome}' j√° existe"))

        #Estados
        estados_data = [
            ('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amap√°'), ('AM', 'Amazonas'),
            ('BA', 'Bahia'), ('CE', 'Cear√°'), ('DF', 'Distrito Federal'),
            ('ES', 'Esp√≠rito Santo'), ('GO', 'Goi√°s'), ('MA', 'Maranh√£o'),
            ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'),
            ('MG', 'Minas Gerais'), ('PA', 'Par√°'), ('PB', 'Para√≠ba'),
            ('PR', 'Paran√°'), ('PE', 'Pernambuco'), ('PI', 'Piau√≠'),
            ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'),
            ('RS', 'Rio Grande do Sul'), ('RO', 'Rond√¥nia'), ('RR', 'Roraima'),
            ('SC', 'Santa Catarina'), ('SP', 'S√£o Paulo'), ('SE', 'Sergipe'),
            ('TO', 'Tocantins')
        ]

        for uf, nome in estados_data:
            obj, created = Estado.objects.get_or_create(uf=uf, nome=nome)
            if created:
                self.stdout.write(self.style.SUCCESS(f"‚úî Tipo de Estado '{nome}' criado"))
            else:
                self.stdout.write(self.style.WARNING(f"‚Ñπ Tipo de Estado '{nome}' j√° existe"))

        #Tipo de Vaga
        tipos_de_vagas = [
            "Ampla Concorr√™ncia",
            "PPI (pretas, pardas, ind√≠genas e quilombolas)",
            "Trans e Travestis",
            "PcD (pessoas com defici√™ncia)"
        ]
        for nome in tipos_de_vagas:
            obj, created = TipoDeVaga.objects.get_or_create(nome=nome)
            if created:
                self.stdout.write(self.style.SUCCESS(f"‚úî Tipo de Vaga '{nome}' criado"))
            else:
                self.stdout.write(self.style.WARNING(f"‚Ñπ Tipo de Vaga '{nome}' j√° existe"))

        # Tipos de Ensino
        tipos_ensino = ["REGULAR", "INTEGRAL"]
        for nome in tipos_ensino:
            obj, created = TipoEnsino.objects.get_or_create(nome=nome)
            if created:
                self.stdout.write(self.style.SUCCESS(f"‚úî Tipo de Ensino '{nome}' criado"))
            else:
                self.stdout.write(self.style.WARNING(f"‚Ñπ Tipo de Ensino '{nome}' j√° existe"))

        # Ra√ßas
        racas = ["Branca", "Preta", "Parda", "Amarela", "Ind√≠gena"]
        for nome in racas:
            obj, created = Raca.objects.get_or_create(nome=nome)
            if created:
                self.stdout.write(self.style.SUCCESS(f"‚úî Ra√ßa '{nome}' criada"))
            else:
                self.stdout.write(self.style.WARNING(f"‚Ñπ Ra√ßa '{nome}' j√° existe"))

        # Defici√™ncias
        deficiencias = [
            "Nenhuma",
            "Defici√™ncia f√≠sica",
            "Defici√™ncia auditiva",
            "Defici√™ncia visual",
            "Defici√™ncia intelectual",
            "Defici√™ncia m√∫ltipla",
            "Transtorno do espectro autista (TEA)"
        ]
        for nome in deficiencias:
            obj, created = Deficiencia.objects.get_or_create(nome=nome)
            if created:
                self.stdout.write(self.style.SUCCESS(f"‚úî Defici√™ncia '{nome}' criada"))
            else:
                self.stdout.write(self.style.WARNING(f"‚Ñπ Defici√™ncia '{nome}' j√° existe"))

        self.stdout.write(self.style.SUCCESS("üéâ Dados iniciais populados com sucesso!"))
